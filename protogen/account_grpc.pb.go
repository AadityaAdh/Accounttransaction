// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: account.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Accountservice_Addaccount_FullMethodName        = "/accounttransaction.Accountservice/Addaccount"
	Accountservice_Updateaccount_FullMethodName     = "/accounttransaction.Accountservice/Updateaccount"
	Accountservice_Getallaccounts_FullMethodName    = "/accounttransaction.Accountservice/Getallaccounts"
	Accountservice_Getsingleaccounts_FullMethodName = "/accounttransaction.Accountservice/Getsingleaccounts"
	Accountservice_Deleteaccount_FullMethodName     = "/accounttransaction.Accountservice/deleteaccount"
)

// AccountserviceClient is the client API for Accountservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountserviceClient interface {
	Addaccount(ctx context.Context, in *Accountmsg, opts ...grpc.CallOption) (*Accountaddedmsg, error)
	Updateaccount(ctx context.Context, in *Updateaccountmsg, opts ...grpc.CallOption) (*Statusmsg, error)
	Getallaccounts(ctx context.Context, in *Getallaccountsmsg, opts ...grpc.CallOption) (*Getallaccountsmsg, error)
	Getsingleaccounts(ctx context.Context, in *Getsingleaccmsg, opts ...grpc.CallOption) (*Accountmsg, error)
	Deleteaccount(ctx context.Context, in *Deleteaccountmsg, opts ...grpc.CallOption) (*Statusmsg, error)
}

type accountserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountserviceClient(cc grpc.ClientConnInterface) AccountserviceClient {
	return &accountserviceClient{cc}
}

func (c *accountserviceClient) Addaccount(ctx context.Context, in *Accountmsg, opts ...grpc.CallOption) (*Accountaddedmsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Accountaddedmsg)
	err := c.cc.Invoke(ctx, Accountservice_Addaccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountserviceClient) Updateaccount(ctx context.Context, in *Updateaccountmsg, opts ...grpc.CallOption) (*Statusmsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Statusmsg)
	err := c.cc.Invoke(ctx, Accountservice_Updateaccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountserviceClient) Getallaccounts(ctx context.Context, in *Getallaccountsmsg, opts ...grpc.CallOption) (*Getallaccountsmsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Getallaccountsmsg)
	err := c.cc.Invoke(ctx, Accountservice_Getallaccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountserviceClient) Getsingleaccounts(ctx context.Context, in *Getsingleaccmsg, opts ...grpc.CallOption) (*Accountmsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Accountmsg)
	err := c.cc.Invoke(ctx, Accountservice_Getsingleaccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountserviceClient) Deleteaccount(ctx context.Context, in *Deleteaccountmsg, opts ...grpc.CallOption) (*Statusmsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Statusmsg)
	err := c.cc.Invoke(ctx, Accountservice_Deleteaccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountserviceServer is the server API for Accountservice service.
// All implementations must embed UnimplementedAccountserviceServer
// for forward compatibility.
type AccountserviceServer interface {
	Addaccount(context.Context, *Accountmsg) (*Accountaddedmsg, error)
	Updateaccount(context.Context, *Updateaccountmsg) (*Statusmsg, error)
	Getallaccounts(context.Context, *Getallaccountsmsg) (*Getallaccountsmsg, error)
	Getsingleaccounts(context.Context, *Getsingleaccmsg) (*Accountmsg, error)
	Deleteaccount(context.Context, *Deleteaccountmsg) (*Statusmsg, error)
	mustEmbedUnimplementedAccountserviceServer()
}

// UnimplementedAccountserviceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountserviceServer struct{}

func (UnimplementedAccountserviceServer) Addaccount(context.Context, *Accountmsg) (*Accountaddedmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Addaccount not implemented")
}
func (UnimplementedAccountserviceServer) Updateaccount(context.Context, *Updateaccountmsg) (*Statusmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updateaccount not implemented")
}
func (UnimplementedAccountserviceServer) Getallaccounts(context.Context, *Getallaccountsmsg) (*Getallaccountsmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getallaccounts not implemented")
}
func (UnimplementedAccountserviceServer) Getsingleaccounts(context.Context, *Getsingleaccmsg) (*Accountmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getsingleaccounts not implemented")
}
func (UnimplementedAccountserviceServer) Deleteaccount(context.Context, *Deleteaccountmsg) (*Statusmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deleteaccount not implemented")
}
func (UnimplementedAccountserviceServer) mustEmbedUnimplementedAccountserviceServer() {}
func (UnimplementedAccountserviceServer) testEmbeddedByValue()                        {}

// UnsafeAccountserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountserviceServer will
// result in compilation errors.
type UnsafeAccountserviceServer interface {
	mustEmbedUnimplementedAccountserviceServer()
}

func RegisterAccountserviceServer(s grpc.ServiceRegistrar, srv AccountserviceServer) {
	// If the following call pancis, it indicates UnimplementedAccountserviceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Accountservice_ServiceDesc, srv)
}

func _Accountservice_Addaccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Accountmsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountserviceServer).Addaccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accountservice_Addaccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountserviceServer).Addaccount(ctx, req.(*Accountmsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accountservice_Updateaccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Updateaccountmsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountserviceServer).Updateaccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accountservice_Updateaccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountserviceServer).Updateaccount(ctx, req.(*Updateaccountmsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accountservice_Getallaccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Getallaccountsmsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountserviceServer).Getallaccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accountservice_Getallaccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountserviceServer).Getallaccounts(ctx, req.(*Getallaccountsmsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accountservice_Getsingleaccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Getsingleaccmsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountserviceServer).Getsingleaccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accountservice_Getsingleaccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountserviceServer).Getsingleaccounts(ctx, req.(*Getsingleaccmsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accountservice_Deleteaccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deleteaccountmsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountserviceServer).Deleteaccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accountservice_Deleteaccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountserviceServer).Deleteaccount(ctx, req.(*Deleteaccountmsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Accountservice_ServiceDesc is the grpc.ServiceDesc for Accountservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Accountservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounttransaction.Accountservice",
	HandlerType: (*AccountserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Addaccount",
			Handler:    _Accountservice_Addaccount_Handler,
		},
		{
			MethodName: "Updateaccount",
			Handler:    _Accountservice_Updateaccount_Handler,
		},
		{
			MethodName: "Getallaccounts",
			Handler:    _Accountservice_Getallaccounts_Handler,
		},
		{
			MethodName: "Getsingleaccounts",
			Handler:    _Accountservice_Getsingleaccounts_Handler,
		},
		{
			MethodName: "deleteaccount",
			Handler:    _Accountservice_Deleteaccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
