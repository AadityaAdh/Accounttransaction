// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: transactions.proto

package transactionprotogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Transactionservice_Addtransaction_FullMethodName       = "/accounttransaction.Transactionservice/Addtransaction"
	Transactionservice_Updatetransaction_FullMethodName    = "/accounttransaction.Transactionservice/Updatetransaction"
	Transactionservice_Getalltransaction_FullMethodName    = "/accounttransaction.Transactionservice/Getalltransaction"
	Transactionservice_Getsingletransaction_FullMethodName = "/accounttransaction.Transactionservice/Getsingletransaction"
	Transactionservice_Deletetransaction_FullMethodName    = "/accounttransaction.Transactionservice/deletetransaction"
)

// TransactionserviceClient is the client API for Transactionservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionserviceClient interface {
	Addtransaction(ctx context.Context, in *Transactionmsg, opts ...grpc.CallOption) (*Transactionaddedmsg, error)
	Updatetransaction(ctx context.Context, in *Updatetransactionmsg, opts ...grpc.CallOption) (*Transactionstatusmsg, error)
	Getalltransaction(ctx context.Context, in *Getalltransactionsmsg, opts ...grpc.CallOption) (*Getalltransactionsmsg, error)
	Getsingletransaction(ctx context.Context, in *Getsingletransactionmsg, opts ...grpc.CallOption) (*Transactionmsg, error)
	Deletetransaction(ctx context.Context, in *Deletetransactionmsg, opts ...grpc.CallOption) (*Transactionstatusmsg, error)
}

type transactionserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionserviceClient(cc grpc.ClientConnInterface) TransactionserviceClient {
	return &transactionserviceClient{cc}
}

func (c *transactionserviceClient) Addtransaction(ctx context.Context, in *Transactionmsg, opts ...grpc.CallOption) (*Transactionaddedmsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transactionaddedmsg)
	err := c.cc.Invoke(ctx, Transactionservice_Addtransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionserviceClient) Updatetransaction(ctx context.Context, in *Updatetransactionmsg, opts ...grpc.CallOption) (*Transactionstatusmsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transactionstatusmsg)
	err := c.cc.Invoke(ctx, Transactionservice_Updatetransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionserviceClient) Getalltransaction(ctx context.Context, in *Getalltransactionsmsg, opts ...grpc.CallOption) (*Getalltransactionsmsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Getalltransactionsmsg)
	err := c.cc.Invoke(ctx, Transactionservice_Getalltransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionserviceClient) Getsingletransaction(ctx context.Context, in *Getsingletransactionmsg, opts ...grpc.CallOption) (*Transactionmsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transactionmsg)
	err := c.cc.Invoke(ctx, Transactionservice_Getsingletransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionserviceClient) Deletetransaction(ctx context.Context, in *Deletetransactionmsg, opts ...grpc.CallOption) (*Transactionstatusmsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transactionstatusmsg)
	err := c.cc.Invoke(ctx, Transactionservice_Deletetransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionserviceServer is the server API for Transactionservice service.
// All implementations must embed UnimplementedTransactionserviceServer
// for forward compatibility.
type TransactionserviceServer interface {
	Addtransaction(context.Context, *Transactionmsg) (*Transactionaddedmsg, error)
	Updatetransaction(context.Context, *Updatetransactionmsg) (*Transactionstatusmsg, error)
	Getalltransaction(context.Context, *Getalltransactionsmsg) (*Getalltransactionsmsg, error)
	Getsingletransaction(context.Context, *Getsingletransactionmsg) (*Transactionmsg, error)
	Deletetransaction(context.Context, *Deletetransactionmsg) (*Transactionstatusmsg, error)
	mustEmbedUnimplementedTransactionserviceServer()
}

// UnimplementedTransactionserviceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionserviceServer struct{}

func (UnimplementedTransactionserviceServer) Addtransaction(context.Context, *Transactionmsg) (*Transactionaddedmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Addtransaction not implemented")
}
func (UnimplementedTransactionserviceServer) Updatetransaction(context.Context, *Updatetransactionmsg) (*Transactionstatusmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updatetransaction not implemented")
}
func (UnimplementedTransactionserviceServer) Getalltransaction(context.Context, *Getalltransactionsmsg) (*Getalltransactionsmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getalltransaction not implemented")
}
func (UnimplementedTransactionserviceServer) Getsingletransaction(context.Context, *Getsingletransactionmsg) (*Transactionmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getsingletransaction not implemented")
}
func (UnimplementedTransactionserviceServer) Deletetransaction(context.Context, *Deletetransactionmsg) (*Transactionstatusmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deletetransaction not implemented")
}
func (UnimplementedTransactionserviceServer) mustEmbedUnimplementedTransactionserviceServer() {}
func (UnimplementedTransactionserviceServer) testEmbeddedByValue()                            {}

// UnsafeTransactionserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionserviceServer will
// result in compilation errors.
type UnsafeTransactionserviceServer interface {
	mustEmbedUnimplementedTransactionserviceServer()
}

func RegisterTransactionserviceServer(s grpc.ServiceRegistrar, srv TransactionserviceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionserviceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Transactionservice_ServiceDesc, srv)
}

func _Transactionservice_Addtransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transactionmsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionserviceServer).Addtransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactionservice_Addtransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionserviceServer).Addtransaction(ctx, req.(*Transactionmsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactionservice_Updatetransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Updatetransactionmsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionserviceServer).Updatetransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactionservice_Updatetransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionserviceServer).Updatetransaction(ctx, req.(*Updatetransactionmsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactionservice_Getalltransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Getalltransactionsmsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionserviceServer).Getalltransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactionservice_Getalltransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionserviceServer).Getalltransaction(ctx, req.(*Getalltransactionsmsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactionservice_Getsingletransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Getsingletransactionmsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionserviceServer).Getsingletransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactionservice_Getsingletransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionserviceServer).Getsingletransaction(ctx, req.(*Getsingletransactionmsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactionservice_Deletetransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deletetransactionmsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionserviceServer).Deletetransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactionservice_Deletetransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionserviceServer).Deletetransaction(ctx, req.(*Deletetransactionmsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Transactionservice_ServiceDesc is the grpc.ServiceDesc for Transactionservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transactionservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounttransaction.Transactionservice",
	HandlerType: (*TransactionserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Addtransaction",
			Handler:    _Transactionservice_Addtransaction_Handler,
		},
		{
			MethodName: "Updatetransaction",
			Handler:    _Transactionservice_Updatetransaction_Handler,
		},
		{
			MethodName: "Getalltransaction",
			Handler:    _Transactionservice_Getalltransaction_Handler,
		},
		{
			MethodName: "Getsingletransaction",
			Handler:    _Transactionservice_Getsingletransaction_Handler,
		},
		{
			MethodName: "deletetransaction",
			Handler:    _Transactionservice_Deletetransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transactions.proto",
}
